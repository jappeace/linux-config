#+TITLE: Emacs configuration
* Personal info

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Jappie J. T. Klooster"
        user-mail-address "jappieklooster@hotmail.com"
        calendar-latitude 52.782
        calendar-longitude 6.331
        calendar-location-name "Kerkdijk 2, Ansen")
#+END_SRC

* Remap keys
i3 already uses alt, remap it to windows key
#+BEGIN_SRC emacs-lisp
  (setq x-super-keysym 'meta) 
#+END_SRC
Fucking K is insert enter alright?! I'm so freaking
used to this, and I *NEVER* want to search for the current
word in the manual.

#+BEGIN_SRC emacs-lisp
(define-key evil-normal-state-map (kbd "K") 'newline)
#+END_SRC

** Space menu
*** Python execute
Python execute with c x like in rust:
#+BEGIN_SRC emacs-lisp
(spacemacs/set-leader-keys-for-major-mode 'python-mode
  "cx" 'spacemacs/python-execute-file
)
#+END_SRC

*** YCM goto
I have no idea what the default is but I want to be able to
ctrl click with the keyboad please.
#+BEGIN_SRC emacs-lisp
  (spacemacs/set-leader-keys "y" 'ycmd-goto)
#+END_SRC
*** Haskell execute
To execute a haskell file similarly to rust and python:
#+BEGIN_SRC emacs-lisp
(spacemacs/set-leader-keys-for-major-mode 'haskell-mode
  "cx" 'inferior-haskell-load-and-run
)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(spacemacs/set-leader-keys-for-major-mode 'haskell-mode
  "y" 'haskell-mode-jump-to-def
)
#+END_SRC

**** Use stack
#+BEGIN_SRC emacs-lisp
(setq haskell-process-type 'stack-ghci)
(setq haskell-process-path-ghci "stack")
#+END_SRC
*** ESS (R) execute
ESS, execute a file like in Rust, Haskell python ...
#+BEGIN_SRC emacs-lisp
(spacemacs/set-leader-keys-for-major-mode 'ess-mode
  "cx" 'ess-load-file
)
#+END_SRC
*** elm execute
    Load the elm project's main in the browser
#+BEGIN_SRC emacs-lisp
(spacemacs/set-leader-keys-for-major-mode 'elm-mode
  "cx" 'elm-preview-main
)
#+END_SRC

*** Git
Push quickly
#+BEGIN_SRC emacs-lisp
(spacemacs/set-leader-keys
  "gp" 'magit-push-to-remote
)
#+END_SRC
Pull quickly
#+BEGIN_SRC emacs-lisp
(spacemacs/set-leader-keys
  "gf" 'magit-pull
)
#+END_SRC
** Spell
*** Change between english/dutch
 I often have to cycle between these two, define f8 to do that for me.
 Source [[https://www.emacswiki.org/emacs/FlySpell][here.]]
 #+BEGIN_SRC emacs-lisp
   (defun fd-switch-dictionary()
     (interactive)
     (let* ((dic ispell-current-dictionary)
         (change (if (string= dic "dutch") "english" "dutch")))
       (ispell-change-dictionary change)
       (message "Dictionary switched from %s to %s" dic change)
       ))

   (global-set-key (kbd "<f8>")   'fd-switch-dictionary)
   (setq ispell-dictionary "en_US")
 #+END_SRC

*** Fix dict not found
appearantly I need to tell emacs to use this now
 #+BEGIN_SRC emacs-lisp
   (setq ispell-program-name "aspell")
 #+END_SRC
 Seemed like a good idea while I'm at it:
 #+BEGIN_SRC emacs-lisp
   (setq ispell-extra-args '("--sug-mode=ultra"))
 #+END_SRC
* Shiny
** Lambda to \lambda
  #+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode t)
  #+END_SRC
** Highlight indentation
  #+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook #'highlight-indentation-mode)
  #+END_SRC
** tab width
#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
#+END_SRC

** JS indentation
#+BEGIN_SRC emacs-lisp
  ; JSON
  (setq-default
  ;; js2-mode
  js2-basic-offset 2
  ;; web-mode
  css-indent-offset 2
  web-mode-markup-indent-offset 2
  web-mode-css-indent-offset 2
  web-mode-code-indent-offset 2
  web-mode-attr-indent-offset 2
  ;; idk
  js-indent-level 2)
#+END_SRC

*** width
#+BEGIN_SRC emacs-lisp
(define-globalized-minor-mode global-fci-mode fci-mode (lambda () (fci-mode 1)))
(global-fci-mode 1)
#+END_SRC

*** Stupid trailing comma warning
#+BEGIN_SRC emacs-lisp
(setq-default js2-strict-trailing-comma-warning nil)
#+END_SRC

*** Just use react mode for javascript, it'll connect to webpack
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.js\\'" . react-mode))
#+END_SRC
* Org mode
** Shiny org
Having + instead of ...
#+BEGIN_SRC emacs-lisp
(setq org-ellipsis " ▼")
#+END_SRC

Fancy lists?
#+BEGIN_SRC emacs-lisp
(setq org-bullets-bullet-list '("■" "◆" "▲" "▶"))
#+END_SRC

Syntax highlighting in source blocks while editing
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC

Use the language's tab major mode
#+BEGIN_SRC emacs-lisp
(setq org-src-tab-acts-natively t)
#+END_SRC

UTF-8 symbols for late shortcuts (such as \alpha).

#+BEGIN_SRC emacs-lisp
(setq org-pretty-entities t)
#+END_SRC

Make latex previews (of complex formulas ie stuff inside []):
#+BEGIN_SRC emacs-lisp
; It now has black font color making it difficult to read
; (setq org-startup-with-latex-preview 'latexpreview)
#+END_SRC

*** koma
Load koma script exporter and letter make stuff
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "/home/jappie/org/ox-koma-letter.el")
(eval-after-load 'ox '(require 'ox-koma-letter))
(eval-after-load 'ox-latex
  '(add-to-list 'org-latex-packages-alist '("AUTO" "babel" t) t))
(eval-after-load 'ox-koma-letter
  '(progn
     (add-to-list 'org-latex-classes
                  '("dutch-letter"
                    "\\documentclass\{scrlttr2\}
     \\setkomavar{frombank}{(1234)\\,567\\,890}
     \[DEFAULT-PACKAGES]
     \[PACKAGES]
     \[EXTRA]"))
     (setq org-koma-letter-use-foldmarks nil)
     (setq org-koma-letter-default-class "dutch-letter")))
#+END_SRC

*** Minted
#+BEGIN_SRC emacs-lisp
    (when (require 'ox-latex nil 'noerror)
      ;; Add minted to the defaults packages to include when exporting.
      (add-to-list 'org-latex-packages-alist '("" "minted"))
      (setq org-latex-listings 'minted)
      (setq org-latex-minted-options
         '(("linenos=true")
           ("fontsize" "\\scriptsize")
           ("xleftmargin" "\\parindent")
            ))
      ;; Let the exporter use the -shell-escape option to let latex
      ;; execute external programs.
      ;; This obviously and can be dangerous to activate!
      (setq org-latex-pdf-process
            '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f")))
#+END_SRC

** Task management

Org directory
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/org")
(defun org-file-path (filename)
  "Return the absolute address of an org file, given its relative name."
  (concat (file-name-as-directory org-directory) filename))
#+END_SRC

define planning.org as the location to dump todo items in.
#+BEGIN_SRC emacs-lisp
(setq org-index-file (org-file-path "planning.org"))
(setq org-archive-location
      (concat (org-file-path "archive.org") "::* From %s"))
#+END_SRC

anyway more is [[https://github.com/hrs/dotfiles/blob/master/emacs.d/configuration.org][here]]

** Chinese
To use chinese we need to use xelatex instead of pdflatex
#+BEGIN_SRC emacs-lisp
(setq org-latex-to-pdf-process
      '("xelatex -interaction nonstopmode -output-directory %o %f"
        "xelatex -interaction nonstopmode -output-directory %o %f"
        "xelatex -interaction nonstopmode -output-directory %o %f"))
#+END_SRC
** References
  Where to find references
  #+BEGIN_SRC emacs-lisp
    (setq org-ref-default-bibliography '("~/Papers/references.bib"))
    (setq org-latex-to-pdf-process (list "latexmk %f && pdflatex %f"))
  #+END_SRC
  
** Plant uml
  see [[http://spacemacs.org/layers/+lang/plantuml/README.html][this]] and [[https://eschulte.github.io/babel-dev/DONE-integrate-plantuml-support.html][that.]] 
  The jar is installed trough portage.
  #+BEGIN_SRC emacs-lisp
    (setq org-plantuml-jar-path
          (expand-file-name "/usr/share/plantuml/lib/plantuml.jar"))
  #+END_SRC
examples on usage can be found [[https://raw.githubusercontent.com/dfeich/org-babel-examples/master/plantuml/plantuml-babel.org][here.]]

** table captions below table
  #+BEGIN_SRC emacs-lisp
    (setq org-latex-caption-above nil)
  #+END_SRC
*** disable ask for evalution for plantuml
  #+BEGIN_SRC emacs-lisp
  (defun my-org-confirm-babel-evaluate (lang body)
      (not (string= lang "plantuml")))
  (setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)

  #+END_SRC

** Load langauges
I don't know why but: https://github.com/syl20bnr/spacemacs/issues/7641
Maybe its security or something? Or efficiency? I dunno layers should fix that
right?

#+BEGIN_SRC emacs-lisp
(require 'ob-plantuml)
(require 'ob-sh)
(require 'ob-lisp)

(org-babel-do-load-languages
  'org-babel-load-languages
  '((sh . t)
    (plantuml . t)
    (lisp . t)
    )
)
#+END_SRC

** Recursive todo list update entries
http://orgmode.org/manual/Breaking-down-tasks.html
Switch entry to DONE when all subentries are done, to TODO otherwise.

#+BEGIN_SRC emacs-lisp
(defun org-summary-todo (n-done n-not-done)
  "Switch entry to DONE when all subentries are done, to TODO otherwise."
  (let (org-log-done org-log-states)   ; turn off logging
    (org-todo (if (= n-not-done 0) "DONE" "TODO"))))

(add-hook 'org-after-todo-statistics-hook 'org-summary-todo)
#+END_SRC

** Fix funny chars in revealjs
https://www.reddit.com/r/emacs/comments/2b5x5g/funny_characters_appended_at_new_line_to_source/
#+BEGIN_SRC emacs-lisp
(when (require 'fill-column-indicator nil 'noerror)
    (fci-mode -1))
#+END_SRC
* Emacs behavior
Don't lock dammit! Its a bad hack to prevent race conditions anyway,
besides the kernel should figure this out. and this way I don't
have to update every gitignore ever.
#+BEGIN_SRC emacs-lisp
  (setq create-lockfiles nil)
#+END_SRC

** workaround invalid search error
Found solution [[https://github.com/philippe-grenet/exordium#bugs][here]] 
#+BEGIN_SRC emacs-lisp
  (setq exordium-git-gutter-non-fringe t) 
#+END_SRC
** Invert pdf's
most likely there is an already built-in solution, but i did not find
it.  I like to read white letters on dark background for pdf-files,
too. So this is my solution:

#+BEGIN_SRC emacs-lisp
  (defun doc-view-invert ()
    "to view inverted pdfs"
    (interactive)
    (let ((pattern (format "%s/*.png" doc-view-current-cache-dir)) )
      (dolist (png-fname(file-expand-wildcards pattern))
        (start-process-shell-command
        "-doc-view-inverting-" "-doc-view-inverting-"
        "convert" png-fname "-negate" png-fname))
      (clear-image-cache ) ))
  (defun doc-view-clear-image-cache ()
    "to get doc-view-invert(ed) current page update"
    (interactive)
    (clear-image-cache))
#+END_SRC


** Try and fix freezing
Also using ivy layer rater than helm for commands.
#+BEGIN_SRC emacs-lisp
  (setq dotspacemacs-mode-line-unicode-symbols nil)
  (setq ediff-window-setup-function 'ediff-setup-windows-default)
#+END_SRC

** Fix helm maybe
(it doesn't work with magit now)
I gues this fixed it.
#+BEGIN_SRC emacs-lisp
(require 'helm-bookmark)
#+END_SRC

** Load webmode for *.jin files
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.jin$" . web-mode))
#+END_SRC

** prettier JS
Enable prettier everything, on save is pretty nice
#+BEGIN_SRC emacs-lisp
  (add-hook 'js2-mode-hook 'prettier-js-mode)
  (add-hook 'react-mode-hook 'prettier-js-mode)
#+END_SRC

Disable it for web mode because it breaks prettier
#+BEGIN_SRC emacs-lisp
  ;(add-hook 'web-mode-hook 'prettier-js-mode)
#+END_SRC
** Accept UTF-8 as utf-8
#+BEGIN_SRC emacs-lisp
(define-coding-system-alias 'UTF-8 'utf-8)
#+END_SRC
** Fira code
#+BEGIN_SRC emacs-lisp
;;; Fira code
;; This works when using emacs --daemon + emacsclient
(add-hook 'after-make-frame-functions (lambda (frame) (set-fontset-font t '(#Xe100 . #Xe16f) "Fira Code Symbol")))
;; This works when using emacs without server/client
;(set-fontset-font t '(#Xe100 . #Xe16f) "Fira Code Symbol")
;; I haven't found one statement that makes both of the above situations work, so I use both for now

(defconst fira-code-font-lock-keywords-alist
  (mapcar (lambda (regex-char-pair)
            `(,(car regex-char-pair)
              (0 (prog1 ()
                   (compose-region (match-beginning 1)
                                   (match-end 1)
                                   ;; The first argument to concat is a string containing a literal tab
                                   ,(concat "	" (list (decode-char 'ucs (cadr regex-char-pair)))))))))
          '(("\\(www\\)"                   #Xe100)
            ("[^/]\\(\\*\\*\\)[^/]"        #Xe101)
            ("\\(\\*\\*\\*\\)"             #Xe102)
            ("\\(\\*\\*/\\)"               #Xe103)
            ("\\(\\*>\\)"                  #Xe104)
            ("[^*]\\(\\*/\\)"              #Xe105)
            ("\\(\\\\\\\\\\)"              #Xe106)
            ("\\(\\\\\\\\\\\\\\)"          #Xe107)
            ("\\({-\\)"                    #Xe108)
            ("\\(\\[\\]\\)"                #Xe109)
            ("\\(::\\)"                    #Xe10a)
            ("\\(:::\\)"                   #Xe10b)
            ("[^=]\\(:=\\)"                #Xe10c)
            ("\\(!!\\)"                    #Xe10d)
            ("\\(!=\\)"                    #Xe10e)
            ("\\(!==\\)"                   #Xe10f)
            ("\\(-}\\)"                    #Xe110)
            ("\\(--\\)"                    #Xe111)
            ("\\(---\\)"                   #Xe112)
            ("\\(-->\\)"                   #Xe113)
            ("[^-]\\(->\\)"                #Xe114)
            ("\\(->>\\)"                   #Xe115)
            ("\\(-<\\)"                    #Xe116)
            ("\\(-<<\\)"                   #Xe117)
            ("\\(-~\\)"                    #Xe118)
            ("\\(#{\\)"                    #Xe119)
            ("\\(#\\[\\)"                  #Xe11a)
            ("\\(##\\)"                    #Xe11b)
            ("\\(###\\)"                   #Xe11c)
            ("\\(####\\)"                  #Xe11d)
            ("\\(#(\\)"                    #Xe11e)
            ("\\(#\\?\\)"                  #Xe11f)
            ("\\(#_\\)"                    #Xe120)
            ("\\(#_(\\)"                   #Xe121)
            ("\\(\\.-\\)"                  #Xe122)
            ("\\(\\.=\\)"                  #Xe123)
            ("\\(\\.\\.\\)"                #Xe124)
            ("\\(\\.\\.<\\)"               #Xe125)
            ("\\(\\.\\.\\.\\)"             #Xe126)
            ("\\(\\?=\\)"                  #Xe127)
            ("\\(\\?\\?\\)"                #Xe128)
            ("\\(;;\\)"                    #Xe129)
            ("\\(/\\*\\)"                  #Xe12a)
            ("\\(/\\*\\*\\)"               #Xe12b)
            ("\\(/=\\)"                    #Xe12c)
            ("\\(/==\\)"                   #Xe12d)
            ("\\(/>\\)"                    #Xe12e)
            ("\\(//\\)"                    #Xe12f)
            ("\\(///\\)"                   #Xe130)
            ("\\(&&\\)"                    #Xe131)
            ("\\(||\\)"                    #Xe132)
            ("\\(||=\\)"                   #Xe133)
            ("[^|]\\(|=\\)"                #Xe134)
            ("\\(|>\\)"                    #Xe135)
            ("\\(\\^=\\)"                  #Xe136)
            ("\\(\\$>\\)"                  #Xe137)
            ("\\(\\+\\+\\)"                #Xe138)
            ("\\(\\+\\+\\+\\)"             #Xe139)
            ("\\(\\+>\\)"                  #Xe13a)
            ("\\(=:=\\)"                   #Xe13b)
            ("[^!/]\\(==\\)[^>]"           #Xe13c)
            ("\\(===\\)"                   #Xe13d)
            ("\\(==>\\)"                   #Xe13e)
            ("[^=]\\(=>\\)"                #Xe13f)
            ("\\(=>>\\)"                   #Xe140)
            ("\\(<=\\)"                    #Xe141)
            ("\\(=<<\\)"                   #Xe142)
            ("\\(=/=\\)"                   #Xe143)
            ("\\(>-\\)"                    #Xe144)
            ("\\(>=\\)"                    #Xe145)
            ("\\(>=>\\)"                   #Xe146)
            ("[^-=]\\(>>\\)"               #Xe147)
            ("\\(>>-\\)"                   #Xe148)
            ("\\(>>=\\)"                   #Xe149)
            ("\\(>>>\\)"                   #Xe14a)
            ("\\(<\\*\\)"                  #Xe14b)
            ("\\(<\\*>\\)"                 #Xe14c)
            ("\\(<|\\)"                    #Xe14d)
            ("\\(<|>\\)"                   #Xe14e)
            ("\\(<\\$\\)"                  #Xe14f)
            ("\\(<\\$>\\)"                 #Xe150)
            ("\\(<!--\\)"                  #Xe151)
            ("\\(<-\\)"                    #Xe152)
            ("\\(<--\\)"                   #Xe153)
            ("\\(<->\\)"                   #Xe154)
            ("\\(<\\+\\)"                  #Xe155)
            ("\\(<\\+>\\)"                 #Xe156)
            ("\\(<=\\)"                    #Xe157)
            ("\\(<==\\)"                   #Xe158)
            ("\\(<=>\\)"                   #Xe159)
            ("\\(<=<\\)"                   #Xe15a)
            ("\\(<>\\)"                    #Xe15b)
            ("[^-=]\\(<<\\)"               #Xe15c)
            ("\\(<<-\\)"                   #Xe15d)
            ("\\(<<=\\)"                   #Xe15e)
            ("\\(<<<\\)"                   #Xe15f)
            ("\\(<~\\)"                    #Xe160)
            ("\\(<~~\\)"                   #Xe161)
            ("\\(</\\)"                    #Xe162)
            ("\\(</>\\)"                   #Xe163)
            ("\\(~@\\)"                    #Xe164)
            ("\\(~-\\)"                    #Xe165)
            ("\\(~=\\)"                    #Xe166)
            ("\\(~>\\)"                    #Xe167)
            ("[^<]\\(~~\\)"                #Xe168)
            ("\\(~~>\\)"                   #Xe169)
            ("\\(%%\\)"                    #Xe16a)
           ;; ("\\(x\\)"                   #Xe16b) This ended up being hard to do properly so i'm leaving it out.
            ("[^:=]\\(:\\)[^:=]"           #Xe16c)
            ("[^\\+<>]\\(\\+\\)[^\\+<>]"   #Xe16d)
            ("[^\\*/<>]\\(\\*\\)[^\\*/<>]" #Xe16f))))

(defun add-fira-code-symbol-keywords ()
  (font-lock-add-keywords nil fira-code-font-lock-keywords-alist))

(add-hook 'prog-mode-hook
          #'add-fira-code-symbol-keywords)
#+END_SRC
* Layers
** Auto complete
Just use company everywhere:
#+BEGIN_SRC emacs-lisp
(global-company-mode)
#+END_SRC

** Use pylint

#+BEGIN_SRC emacs-lisp
  (add-hook 'python-mode-hook (lambda ()
                           (flycheck-mode 1)
                           (semantic-mode 1)
                           (setq flycheck-checker 'python-pylint
                                 flycheck-checker-error-threshold 400
                                 flycheck-pylintrc "~/.pylintrc")))
#+END_SRC

** JS

* Git mergetool
Setup ediff (works in combo with gitconfig)

#+BEGIN_SRC emacs-lisp
(defvar ediff-after-quit-hooks nil
  "* Hooks to run after ediff or emerge is quit.")

(defadvice ediff-quit (after edit-after-quit-hooks activate)
  (run-hooks 'ediff-after-quit-hooks))

(setq git-mergetool-emacsclient-ediff-active nil)


(setq ediff-window-setup-function 'ediff-setup-windows-plain)
(setq ediff-split-window-function 'split-window-horizontally)

(defun local-ediff-before-setup-hook ()
  (setq local-ediff-saved-frame-configuration (current-frame-configuration))
  (setq local-ediff-saved-window-configuration (current-window-configuration))
  ;; (local-ediff-frame-maximize)
  (if git-mergetool-emacsclient-ediff-active
      (raise-frame)))

(defun local-ediff-quit-hook ()
  (set-frame-configuration local-ediff-saved-frame-configuration)
  (set-window-configuration local-ediff-saved-window-configuration))

(defun local-ediff-suspend-hook ()
  (set-frame-configuration local-ediff-saved-frame-configuration)
  (set-window-configuration local-ediff-saved-window-configuration))

(add-hook 'ediff-before-setup-hook 'local-ediff-before-setup-hook)
(add-hook 'ediff-quit-hook 'local-ediff-quit-hook 'append)
(add-hook 'ediff-suspend-hook 'local-ediff-suspend-hook 'append)

;; Useful for ediff merge from emacsclient.
(defun git-mergetool-emacsclient-ediff (local remote base merged)
  (setq git-mergetool-emacsclient-ediff-active t)
  (if (file-readable-p base)
      (ediff-merge-files-with-ancestor local remote base nil merged)
    (ediff-merge-files local remote nil merged))
  (recursive-edit))

(defun git-mergetool-emacsclient-ediff-after-quit-hook ()
  (exit-recursive-edit))

(add-hook 'ediff-after-quit-hooks 'git-mergetool-emacsclient-ediff-after-quit-hook 'append)
#+END_SRC
