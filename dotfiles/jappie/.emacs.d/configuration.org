#+TITLE: Emacs configuration
* Personal info

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Jappie T. Klooster"
        user-mail-address "jappieklooster@hotmail.com"
        calendar-latitude 52.782
        calendar-longitude 6.331
        calendar-location-name "Kerkdijk 2, Ansen")
#+END_SRC

* Remap keys
i3 already uses alt, remap it to windows key
#+BEGIN_SRC emacs-lisp
  (setq x-super-keysym 'meta) 
#+END_SRC
Fucking K is insert enter alright?! I'm so freaking
used to this, and I *NEVER* want to search for the current
word in the manual.

#+BEGIN_SRC emacs-lisp
(define-key evil-normal-state-map (kbd "K") 'newline)
#+END_SRC

** Space menu
*** Python execute
Python execute with c x like in rust:
#+BEGIN_SRC emacs-lisp
(spacemacs/set-leader-keys-for-major-mode 'python-mode
  "cx" 'spacemacs/python-execute-file
)
#+END_SRC

*** YCM goto
I have no idea what the default is but I want to be able to
ctrl click with the keyboad please.
#+BEGIN_SRC emacs-lisp
  (spacemacs/set-leader-keys "y" 'ycmd-goto)
#+END_SRC
*** Haskell execute
To execute a haskell file similarly to rust and python:
#+BEGIN_SRC emacs-lisp
(spacemacs/set-leader-keys-for-major-mode 'haskell-mode
  "cx" 'inferior-haskell-load-and-run
)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(spacemacs/set-leader-keys-for-major-mode 'haskell-mode
  "y" 'haskell-mode-jump-to-def
)
#+END_SRC


** Change between english/dutch
I often have to cycle between these two, define f8 to do that for me.
Source [[https://www.emacswiki.org/emacs/FlySpell][here.]]
#+BEGIN_SRC emacs-lisp
      (defun fd-switch-dictionary()
      (interactive)
      (let* ((dic ispell-current-dictionary)
    	 (change (if (string= dic "dutch") "english" "dutch")))
        (ispell-change-dictionary change)
        (message "Dictionary switched from %s to %s" dic change)
        ))
    
      (global-set-key (kbd "<f8>")   'fd-switch-dictionary)
#+END_SRC
* Shiny
** Lambda to \lambda
  #+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode t)
  #+END_SRC
** line numbers
  #+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook #'linum-mode)
(add-hook 'prog-mode-hook #'linum-relative-toggle)
  #+END_SRC
** tab width
#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
#+END_SRC

** Column width
#+BEGIN_SRC emacs-lisp
(define-globalized-minor-mode global-fci-mode fci-mode (lambda () (fci-mode 1)))
(global-fci-mode 1)
#+END_SRC
* YCM
Where is the daemon?
#+BEGIN_SRC emacs-lisp
  (set-variable 'ycmd-server-command '("python" "/home/jappie/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd"))
#+END_SRC

Which languages to complete?
#+BEGIN_SRC emacs-lisp
  (add-hook 'c++-mode-hook 'ycmd-mode)
  (add-hook 'rust-mode-hook 'ycmd-mode)
  (add-hook 'python-mode-hook 'ycmd-mode)
#+END_SRC

** Upgrading ycmd/rust
First upgrade rust on the system. Then upgrade the vim ycmd plugin. You
can also choose to upgrade racer. Don't forget to also upgrade the emacs
packages.

If ymcd is giving mysterious timeout errors make sure you're using python 3.
ie something like:
  ycmd--start-server: ERROR: Ycmd server timeout

If ymcd still won't start the emacs version of the client and the server
version's protocol may be to far apart. In this case just try fucking around
with git on the server.

* Org mode
** Shiny org
Having + instead of ...
#+BEGIN_SRC emacs-lisp
(setq org-ellipsis " ▼")
#+END_SRC

Fancy lists?
#+BEGIN_SRC emacs-lisp
(setq org-bullets-bullet-list '("■" "◆" "▲" "▶"))
#+END_SRC

Syntax highlighting in source blocks while editing
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC

Use the language's tab major mode
#+BEGIN_SRC emacs-lisp
(setq org-src-tab-acts-natively t)
#+END_SRC

UTF-8 symbols for late shortcuts (such as \alpha).

#+BEGIN_SRC emacs-lisp
(setq org-pretty-entities t)
#+END_SRC

Make latex previews (of complex formulas ie stuff inside []):
#+BEGIN_SRC emacs-lisp
(setq org-startup-with-latex-preview 'latexpreview)
#+END_SRC

Load koma script exporter and letter make stuff
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "/home/jappie/org/ox-koma-letter.el")
(eval-after-load 'ox '(require 'ox-koma-letter))
(eval-after-load 'ox-latex
  '(add-to-list 'org-latex-packages-alist '("AUTO" "babel" t) t))
(eval-after-load 'ox-koma-letter
  '(progn
     (add-to-list 'org-latex-classes
                  '("dutch-letter"
                    "\\documentclass\{scrlttr2\}
     \\usepackage[dutch]{babel}
     \\setkomavar{frombank}{(1234)\\,567\\,890}
     \[DEFAULT-PACKAGES]
     \[PACKAGES]
     \[EXTRA]"))

     (setq org-koma-letter-default-class "dutch-letter")))
#+END_SRC

** Task management

Org directory
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/org")
(defun org-file-path (filename)
  "Return the absolute address of an org file, given its relative name."
  (concat (file-name-as-directory org-directory) filename))
#+END_SRC

define planning.org as the location to dump todo items in.
#+BEGIN_SRC emacs-lisp
(setq org-index-file (org-file-path "planning.org"))
(setq org-archive-location
      (concat (org-file-path "archive.org") "::* From %s"))
#+END_SRC

anyway more is [[https://github.com/hrs/dotfiles/blob/master/emacs.d/configuration.org][here]]

** Chinese
To use chinese we need to use xelatex instead of pdflatex
#+BEGIN_SRC emacs-lisp
(setq org-latex-to-pdf-process
      '("xelatex -interaction nonstopmode -output-directory %o %f"
        "xelatex -interaction nonstopmode -output-directory %o %f"
        "xelatex -interaction nonstopmode -output-directory %o %f"))
#+END_SRC
* Emacs behavior
Don't lock dammit! Its a bad hack to prevent race conditions anyway,
besides the kernel should figure this out. and this way I don't
have to update every gitignore ever.
#+BEGIN_SRC emacs-lisp
  (setq create-lockfiles nil)
#+END_SRC

** Invert pdf's
most likely there is an already built-in solution, but i did not find
it.  I like to read white letters on dark background for pdf-files,
too. So this is my solution:

#+BEGIN_SRC emacs-lisp
  (defun doc-view-invert ()
    "to view inverted pdfs"
    (interactive)
    (let ((pattern (format "%s/*.png" doc-view-current-cache-dir)) )
      (dolist (png-fname(file-expand-wildcards pattern))
        (start-process-shell-command
        "-doc-view-inverting-" "-doc-view-inverting-"
        "convert" png-fname "-negate" png-fname))
      (clear-image-cache ) ))
  (defun doc-view-clear-image-cache ()
    "to get doc-view-invert(ed) current page update"
    (interactive)
    (clear-image-cache))
#+END_SRC



