#+TITLE: Emacs configuration
* Personal info

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Jappie J. T. Klooster"
        user-mail-address "jappieklooster@hotmail.com"
        calendar-latitude 52.782
        calendar-longitude 6.331
        calendar-location-name "Kerkdijk 2, Ansen")
#+END_SRC

* Remap keys
i3 already uses alt, remap it to windows key
#+BEGIN_SRC emacs-lisp
  (setq x-super-keysym 'meta) 
#+END_SRC
Fucking K is insert enter alright?! I'm so freaking
used to this, and I *NEVER* want to search for the current
word in the manual.

#+BEGIN_SRC emacs-lisp
(define-key evil-normal-state-map (kbd "K") 'newline)
#+END_SRC

** Space menu
*** Python execute
Python execute with c x like in rust:
#+BEGIN_SRC emacs-lisp
(spacemacs/set-leader-keys-for-major-mode 'python-mode
  "cx" 'spacemacs/python-execute-file
)
#+END_SRC

*** YCM goto
I have no idea what the default is but I want to be able to
ctrl click with the keyboad please.
#+BEGIN_SRC emacs-lisp
  (spacemacs/set-leader-keys "y" 'ycmd-goto)
#+END_SRC
*** Haskell execute
To execute a haskell file similarly to rust and python:
#+BEGIN_SRC emacs-lisp
(spacemacs/set-leader-keys-for-major-mode 'haskell-mode
  "cx" 'inferior-haskell-load-and-run
)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(spacemacs/set-leader-keys-for-major-mode 'haskell-mode
  "y" 'haskell-mode-jump-to-def
)
#+END_SRC

*** ESS (R) execute
ESS, execute a file like in Rust, Haskell python ...
#+BEGIN_SRC emacs-lisp
(spacemacs/set-leader-keys-for-major-mode 'ess-mode
  "cx" 'ess-load-file
)
#+END_SRC
*** elm execute
    Load the elm project's main in the browser
#+BEGIN_SRC emacs-lisp
(spacemacs/set-leader-keys-for-major-mode 'elm-mode
  "cx" 'elm-preview-main
)
#+END_SRC

*** Git
Push quickly
#+BEGIN_SRC emacs-lisp
(spacemacs/set-leader-keys
  "gp" 'magit-push-to-remote
)
(spacemacs/set-leader-keys
  "gmp" 'magit-push-to-remote ;; muscle memory
)
#+END_SRC
Pull quickly
#+BEGIN_SRC emacs-lisp
(spacemacs/set-leader-keys
  "gf" 'magit-pull
)
#+END_SRC
** Change between english/dutch
I often have to cycle between these two, define f8 to do that for me.
Source [[https://www.emacswiki.org/emacs/FlySpell][here.]]
#+BEGIN_SRC emacs-lisp
      (defun fd-switch-dictionary()
      (interactive)
      (let* ((dic ispell-current-dictionary)
    	 (change (if (string= dic "dutch") "english" "dutch")))
        (ispell-change-dictionary change)
        (message "Dictionary switched from %s to %s" dic change)
        ))
    
      (global-set-key (kbd "<f8>")   'fd-switch-dictionary)
#+END_SRC
* Shiny
** Lambda to \lambda
  #+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode t)
  #+END_SRC
** line numbers
  #+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook #'linum-mode)
(add-hook 'prog-mode-hook #'linum-relative-toggle)
  #+END_SRC
** Highlight indentation
  #+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook #'highlight-indentation-mode)
  #+END_SRC
** tab width
#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
#+END_SRC

** Column width
#+BEGIN_SRC emacs-lisp
(define-globalized-minor-mode global-fci-mode fci-mode (lambda () (fci-mode 1)))
(global-fci-mode 1)
#+END_SRC

** Fira code font

#+BEGIN_SRC emacs-lisp
;; This works when using emacs --daemon + emacsclient
(add-hook 'after-make-frame-functions (lambda (frame) (set-fontset-font t '(#Xe100 . #Xe16f) "Fira Code")))
;; This works when using emacs without server/client
(set-fontset-font t '(#Xe100 . #Xe16f) "Fira Code")
;; I haven't found one statement that makes both of the above situations work, so I use both for now

(defconst fira-code-font-lock-keywords-alist
  (mapcar (lambda (regex-char-pair)
            `(,(car regex-char-pair)
              (0 (prog1 ()
                   (compose-region (match-beginning 1)
                                   (match-end 1)
                                   ;; The first argument to concat is a string containing a literal tab
                                   ,(concat "	" (list (decode-char 'ucs (cadr regex-char-pair)))))))))
          '(("\\(www\\)"                   #Xe100)
            ("[^/]\\(\\*\\*\\)[^/]"        #Xe101)
            ("\\(\\*\\*\\*\\)"             #Xe102)
            ("\\(\\*\\*/\\)"               #Xe103)
            ("\\(\\*>\\)"                  #Xe104)
            ("[^*]\\(\\*/\\)"              #Xe105)
            ("\\(\\\\\\\\\\)"              #Xe106)
            ("\\(\\\\\\\\\\\\\\)"          #Xe107)
            ("\\({-\\)"                    #Xe108)
            ("\\(\\[\\]\\)"                #Xe109)
            ("\\(::\\)"                    #Xe10a)
            ("\\(:::\\)"                   #Xe10b)
            ("[^=]\\(:=\\)"                #Xe10c)
            ("\\(!!\\)"                    #Xe10d)
            ("\\(!=\\)"                    #Xe10e)
            ("\\(!==\\)"                   #Xe10f)
            ("\\(-}\\)"                    #Xe110)
            ("\\(--\\)"                    #Xe111)
            ("\\(---\\)"                   #Xe112)
            ("\\(-->\\)"                   #Xe113)
            ("[^-]\\(->\\)"                #Xe114)
            ("\\(->>\\)"                   #Xe115)
            ("\\(-<\\)"                    #Xe116)
            ("\\(-<<\\)"                   #Xe117)
            ("\\(-~\\)"                    #Xe118)
            ("\\(#{\\)"                    #Xe119)
            ("\\(#\\[\\)"                  #Xe11a)
            ("\\(##\\)"                    #Xe11b)
            ("\\(###\\)"                   #Xe11c)
            ("\\(####\\)"                  #Xe11d)
            ("\\(#(\\)"                    #Xe11e)
            ("\\(#\\?\\)"                  #Xe11f)
            ("\\(#_\\)"                    #Xe120)
            ("\\(#_(\\)"                   #Xe121)
            ("\\(\\.-\\)"                  #Xe122)
            ("\\(\\.=\\)"                  #Xe123)
            ("\\(\\.\\.\\)"                #Xe124)
            ("\\(\\.\\.<\\)"               #Xe125)
            ("\\(\\.\\.\\.\\)"             #Xe126)
            ("\\(\\?=\\)"                  #Xe127)
            ("\\(\\?\\?\\)"                #Xe128)
            ("\\(;;\\)"                    #Xe129)
            ("\\(/\\*\\)"                  #Xe12a)
            ("\\(/\\*\\*\\)"               #Xe12b)
            ("\\(/=\\)"                    #Xe12c)
            ("\\(/==\\)"                   #Xe12d)
            ("\\(/>\\)"                    #Xe12e)
            ("\\(//\\)"                    #Xe12f)
            ("\\(///\\)"                   #Xe130)
            ("\\(&&\\)"                    #Xe131)
            ("\\(||\\)"                    #Xe132)
            ("\\(||=\\)"                   #Xe133)
            ("[^|]\\(|=\\)"                #Xe134)
            ("\\(|>\\)"                    #Xe135)
            ("\\(\\^=\\)"                  #Xe136)
            ("\\(\\$>\\)"                  #Xe137)
            ("\\(\\+\\+\\)"                #Xe138)
            ("\\(\\+\\+\\+\\)"             #Xe139)
            ("\\(\\+>\\)"                  #Xe13a)
            ("\\(=:=\\)"                   #Xe13b)
            ("[^!/]\\(==\\)[^>]"           #Xe13c)
            ("\\(===\\)"                   #Xe13d)
            ("\\(==>\\)"                   #Xe13e)
            ("[^=]\\(=>\\)"                #Xe13f)
            ("\\(=>>\\)"                   #Xe140)
            ("\\(<=\\)"                    #Xe141)
            ("\\(=<<\\)"                   #Xe142)
            ("\\(=/=\\)"                   #Xe143)
            ("\\(>-\\)"                    #Xe144)
            ("\\(>=\\)"                    #Xe145)
            ("\\(>=>\\)"                   #Xe146)
            ("[^-=]\\(>>\\)"               #Xe147)
            ("\\(>>-\\)"                   #Xe148)
            ("\\(>>=\\)"                   #Xe149)
            ("\\(>>>\\)"                   #Xe14a)
            ("\\(<\\*\\)"                  #Xe14b)
            ("\\(<\\*>\\)"                 #Xe14c)
            ("\\(<|\\)"                    #Xe14d)
            ("\\(<|>\\)"                   #Xe14e)
            ("\\(<\\$\\)"                  #Xe14f)
            ("\\(<\\$>\\)"                 #Xe150)
            ("\\(<!--\\)"                  #Xe151)
            ("\\(<-\\)"                    #Xe152)
            ("\\(<--\\)"                   #Xe153)
            ("\\(<->\\)"                   #Xe154)
            ("\\(<\\+\\)"                  #Xe155)
            ("\\(<\\+>\\)"                 #Xe156)
            ("\\(<=\\)"                    #Xe157)
            ("\\(<==\\)"                   #Xe158)
            ("\\(<=>\\)"                   #Xe159)
            ("\\(<=<\\)"                   #Xe15a)
            ("\\(<>\\)"                    #Xe15b)
            ("[^-=]\\(<<\\)"               #Xe15c)
            ("\\(<<-\\)"                   #Xe15d)
            ("\\(<<=\\)"                   #Xe15e)
            ("\\(<<<\\)"                   #Xe15f)
            ("\\(<~\\)"                    #Xe160)
            ("\\(<~~\\)"                   #Xe161)
            ("\\(</\\)"                    #Xe162)
            ("\\(</>\\)"                   #Xe163)
            ("\\(~@\\)"                    #Xe164)
            ("\\(~-\\)"                    #Xe165)
            ("\\(~=\\)"                    #Xe166)
            ("\\(~>\\)"                    #Xe167)
            ("[^<]\\(~~\\)"                #Xe168)
            ("\\(~~>\\)"                   #Xe169)
            ("\\(%%\\)"                    #Xe16a)
            ;;("\\(x\\)"                     #Xe16b)
            ("[^:=]\\(:\\)[^:=]"           #Xe16c)
            ("[^\\+<>]\\(\\+\\)[^\\+<>]"   #Xe16d)
            ("[^\\*/<>]\\(\\*\\)[^\\*/<>]" #Xe16f))))

(defun add-fira-code-symbol-keywords ()
  (font-lock-add-keywords nil fira-code-font-lock-keywords-alist))

(add-hook 'prog-mode-hook
#'add-fira-code-symbol-keywords)
#+END_SRC


* Deamons
** YCM
 Where is the daemon?
 #+BEGIN_SRC emacs-lisp
   (set-variable 'ycmd-server-command '("python" "/home/jappie/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd"))
 #+END_SRC

 Which languages to complete?
 #+BEGIN_SRC emacs-lisp
   (add-hook 'c++-mode-hook 'ycmd-mode)
   (add-hook 'rust-mode-hook 'ycmd-mode)
   (add-hook 'python-mode-hook 'ycmd-mode)
 #+END_SRC

*** Upgrading ycmd/rust
 First upgrade rust on the system. Then upgrade the vim ycmd plugin
 (git pull in ~/.vim/bundle/YouCompleteMe), (also maybe the submodules)
 and then:
 ./install.py --clang-completer --tern-completer --racer-completer

**** upgrade racer
 You can also choose to upgrade racer. in ~/Projects/racer/
 git pull and then cargo compile --release
 then
 #+BEGIN_SRC bash
 cp /usr/portage/distfiles/rustc-1.$MINOR_VERSION-src.tar.gz ~/Projects/racer/target
 cd ~/Projects/racer/target
 tar zxf rustc-1.$MINOR_VERSION-src.tar.gz 
 #+END_SRC

 Don't forget to update the rust sources in: ~/.config/shell-globals.sh

**** emacs
 The emacs packages have to be upgraded.

**** error handling
 If ymcd is giving mysterious timeout errors make sure you're using python 3.
 ie something like:
   ycmd--start-server: ERROR: Ycmd server timeout

 If ymcd still won't start the emacs version of the client and the server
 version's protocol may be to far apart. In this case just try fucking around
 with git on the server.

** Eclim
 #+BEGIN_SRC emacs-lisp
 (setq eclim-eclipse-dirs "/opt/eclipse"
       eclim-executable "/opt/eclipse/eclim")
 #+END_SRC
* Org mode
** Shiny org
Having + instead of ...
#+BEGIN_SRC emacs-lisp
(setq org-ellipsis " ▼")
#+END_SRC

Fancy lists?
#+BEGIN_SRC emacs-lisp
(setq org-bullets-bullet-list '("■" "◆" "▲" "▶"))
#+END_SRC

Syntax highlighting in source blocks while editing
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC

Use the language's tab major mode
#+BEGIN_SRC emacs-lisp
(setq org-src-tab-acts-natively t)
#+END_SRC

UTF-8 symbols for late shortcuts (such as \alpha).

#+BEGIN_SRC emacs-lisp
(setq org-pretty-entities t)
#+END_SRC

Make latex previews (of complex formulas ie stuff inside []):
#+BEGIN_SRC emacs-lisp
(setq org-startup-with-latex-preview 'latexpreview)
#+END_SRC

Load koma script exporter and letter make stuff
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "/home/jappie/org/ox-koma-letter.el")
(eval-after-load 'ox '(require 'ox-koma-letter))
(eval-after-load 'ox-latex
  '(add-to-list 'org-latex-packages-alist '("AUTO" "babel" t) t))
(eval-after-load 'ox-koma-letter
  '(progn
     (add-to-list 'org-latex-classes
                  '("dutch-letter"
                    "\\documentclass\{scrlttr2\}
     \\usepackage[dutch]{babel}
     \\setkomavar{frombank}{(1234)\\,567\\,890}
     \[DEFAULT-PACKAGES]
     \[PACKAGES]
     \[EXTRA]"))

     (setq org-koma-letter-default-class "dutch-letter")))
#+END_SRC

** Task management

Org directory
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/org")
(defun org-file-path (filename)
  "Return the absolute address of an org file, given its relative name."
  (concat (file-name-as-directory org-directory) filename))
#+END_SRC

define planning.org as the location to dump todo items in.
#+BEGIN_SRC emacs-lisp
(setq org-index-file (org-file-path "planning.org"))
(setq org-archive-location
      (concat (org-file-path "archive.org") "::* From %s"))
#+END_SRC

anyway more is [[https://github.com/hrs/dotfiles/blob/master/emacs.d/configuration.org][here]]

** Chinese
To use chinese we need to use xelatex instead of pdflatex
#+BEGIN_SRC emacs-lisp
(setq org-latex-to-pdf-process
      '("xelatex -interaction nonstopmode -output-directory %o %f"
        "xelatex -interaction nonstopmode -output-directory %o %f"
        "xelatex -interaction nonstopmode -output-directory %o %f"))
#+END_SRC
** References
  Where to find references
  #+BEGIN_SRC emacs-lisp
    (setq org-ref-default-bibliography '("~/Papers/references.bib"))
    (setq org-latex-to-pdf-process (list "latexmk %f && pdflatex %f"))
  #+END_SRC
  
** Plant uml
  see [[http://spacemacs.org/layers/+lang/plantuml/README.html][this]] and [[https://eschulte.github.io/babel-dev/DONE-integrate-plantuml-support.html][that.]] 
  The jar is installed trough portage.
  #+BEGIN_SRC emacs-lisp
    (setq org-plantuml-jar-path
          (expand-file-name "/usr/share/plantuml/lib/plantuml.jar"))
  #+END_SRC
examples on usage can be found [[https://raw.githubusercontent.com/dfeich/org-babel-examples/master/plantuml/plantuml-babel.org][here.]]

** table captions below table
  #+BEGIN_SRC emacs-lisp
    (setq org-latex-caption-above nil)
  #+END_SRC
*** disable ask for evalution for plantuml
  #+BEGIN_SRC emacs-lisp
  (defun my-org-confirm-babel-evaluate (lang body)
      (not (string= lang "plantuml")))
  (setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
  #+END_SRC

* Emacs behavior
Don't lock dammit! Its a bad hack to prevent race conditions anyway,
besides the kernel should figure this out. and this way I don't
have to update every gitignore ever.
#+BEGIN_SRC emacs-lisp
  (setq create-lockfiles nil)
#+END_SRC

** workaround invalid search error
Found solution [[https://github.com/philippe-grenet/exordium#bugs][here]] 
#+BEGIN_SRC emacs-lisp
  (setq exordium-git-gutter-non-fringe t) 
#+END_SRC
** Invert pdf's
most likely there is an already built-in solution, but i did not find
it.  I like to read white letters on dark background for pdf-files,
too. So this is my solution:

#+BEGIN_SRC emacs-lisp
  (defun doc-view-invert ()
    "to view inverted pdfs"
    (interactive)
    (let ((pattern (format "%s/*.png" doc-view-current-cache-dir)) )
      (dolist (png-fname(file-expand-wildcards pattern))
        (start-process-shell-command
        "-doc-view-inverting-" "-doc-view-inverting-"
        "convert" png-fname "-negate" png-fname))
      (clear-image-cache ) ))
  (defun doc-view-clear-image-cache ()
    "to get doc-view-invert(ed) current page update"
    (interactive)
    (clear-image-cache))
#+END_SRC


